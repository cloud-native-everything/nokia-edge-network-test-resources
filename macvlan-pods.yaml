apiVersion: v1
kind: ConfigMap
metadata:
  name: py-tftpboot
data:
  http_server.py: |
    import socket, struct, fcntl
    import random
    # Defining Variables
    last_octect=str(random.randint(1,254))
    net1_ip = '10.0.251.'+last_octect
    net2_ip = '10.0.252.'+last_octect
    net3_ip = '10.0.253.'+last_octect
    net4_ip = '10.0.254.'+last_octect
    #saving var to file
    file_object=open('interfaces.txt', 'w')
    file_object.write('NET1_IP='+net1_ip+'\n')
    file_object.write('NET2_IP='+net2_ip+'\n')
    file_object.write('NET3_IP='+net3_ip+'\n')
    file_object.write('NET4_IP='+net4_ip+'\n')
    file_object.close()
    
    SIOCSIFADDR = 0x8916
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    def setIpAddr(iface, ip):
        bin_ip = socket.inet_aton(ip)
        ifreq = struct.pack('16sH2s4s8s', iface, socket.AF_INET,b'\x00' * 2, bin_ip,b'\x00' * 8)
        fcntl.ioctl(sock, SIOCSIFADDR, ifreq)
    
    setIpAddr(b'net1',net1_ip)    
    setIpAddr(b'net2',net2_ip)    
    setIpAddr(b'net3',net3_ip)    
    setIpAddr(b'net4',net4_ip)    
    
    import os
    from http.server import HTTPServer, BaseHTTPRequestHandler
    class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
      def do_GET(self):
          self.send_response(200)
          self.send_header("Content-type", "text/html")
          self.end_headers()
          hostname = os.environ['HOSTNAME']
          worker = os.environ['K8S_NODE_NAME']
          text = f"K8s Node: {worker} - Hostname: {hostname}\n"
          self.wfile.write(bytes(text, "utf8"))
    port = int(os.environ['HTTP_APP_PORT'])
    httpd = HTTPServer(('0.0.0.0', port), SimpleHTTPRequestHandler)
    httpd.serve_forever()

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: macvlan-deploy
spec:
  selector:
    matchLabels:
      app: macvlan-pod
  template:
    metadata:
      labels:
        app: macvlan-pod
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
             {"name":"macvlan-251", "interface": "net1"},
             {"name":"macvlan-252", "interface": "net2"},
             {"name":"macvlan-253", "interface": "net3"},
             {"name":"macvlan-254", "interface": "net4"}
          ]        
    spec:
      volumes:
      - name: tftpboot	  # The name of the volume
        configMap:
          name: py-tftpboot
      containers:
        - name: macvlan-pod
          image: python:latest
          imagePullPolicy: Never
          command: ["python3"]
          args: ["/tftpboot/http_server.py"]
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: HTTP_APP_PORT
            value: "8080"
          securityContext:
            privileged: true    
          volumeMounts:
          - name: tftpboot
            mountPath: /tftpboot
